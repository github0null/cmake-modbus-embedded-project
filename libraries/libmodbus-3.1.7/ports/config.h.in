/* config.h.  Generated from config.h.in by configure.  */
/* config.h.in.  Generated from configure.ac by autoheader.  */
#ifndef LIBMODBUS_CONF_H
#define LIBMODBUS_CONF_H

/* Define to 1 if you have the <arpa/inet.h> header file. */
/* #undef HAVE_ARPA_INET_H */

/* Define to 1 if you have the declaration of `TIOCSRS485', and to 0 if you
   don't. */
/* #undef HAVE_DECL_TIOCSRS485 */

/* Define to 1 if you have the declaration of `__CYGWIN__', and to 0 if you
   don't. */
/* #undef HAVE_DECL___CYGWIN__ */

/* Define to 1 if you have the <dlfcn.h> header file. */
/* #undef HAVE_DLFCN_H */

/* Define to 1 if you have the <errno.h> header file. */
#define HAVE_ERRNO_H 0

/* Define to 1 if you have the <fcntl.h> header file. */
#define HAVE_FCNTL_H 0

/* Define to 1 if you have the `fork' function. */
/* #undef HAVE_FORK */

/* Define to 1 if you have the `getaddrinfo' function. */
/* #undef HAVE_GETADDRINFO */

/* Define to 1 if you have the `gettimeofday' function. */
/* #undef HAVE_GETTIMEOFDAY */

/* Define to 1 if you have the `inet_ntoa' function. */
/* #undef HAVE_INET_NTOA */

/* Define to 1 if you have the <inttypes.h> header file. */
#define HAVE_INTTYPES_H 0

/* Define to 1 if you have the <limits.h> header file. */
#define HAVE_LIMITS_H 1

/* Define to 1 if you have the <linux/serial.h> header file. */
/* #undef HAVE_LINUX_SERIAL_H */

/* Define to 1 if you have the <memory.h> header file. */
#define HAVE_MEMORY_H 1

/* Define to 1 if you have the `memset' function. */
#define HAVE_MEMSET 1

/* Define to 1 if you have the <netdb.h> header file. */
/* #undef HAVE_NETDB_H */

/* Define to 1 if you have the <netinet/in.h> header file. */
/* #undef HAVE_NETINET_IN_H */

/* Define to 1 if you have the <netinet/tcp.h> header file. */
/* #undef HAVE_NETINET_TCP_H */

/* Define to 1 if you have the `select' function. */
/* #undef HAVE_SELECT */

/* Define to 1 if you have the `socket' function. */
/* #undef HAVE_SOCKET */

/* Define to 1 if you have the <stdint.h> header file. */
#define HAVE_STDINT_H 1

/* Define to 1 if you have the <stdlib.h> header file. */
#define HAVE_STDLIB_H 1

/* Define to 1 if you have the `strerror' function. */
#define HAVE_STRERROR 0

/* Define to 1 if you have the <strings.h> header file. */
/* #undef HAVE_STRINGS_H */

/* Define to 1 if you have the <string.h> header file. */
#define HAVE_STRING_H 1

/* Define to 1 if you have the `strlcpy' function. */
/* #undef HAVE_STRLCPY */

/* Define to 1 if you have the <sys/ioctl.h> header file. */
/* #undef HAVE_SYS_IOCTL_H */

/* Define to 1 if you have the <sys/socket.h> header file. */
/* #undef HAVE_SYS_SOCKET_H */

/* Define to 1 if you have the <sys/stat.h> header file. */
#define HAVE_SYS_STAT_H 0

/* Define to 1 if you have the <sys/time.h> header file. */
/* #undef HAVE_SYS_TIME_H */

/* Define to 1 if you have the <sys/types.h> header file. */
#define HAVE_SYS_TYPES_H 0

/* Define to 1 if you have the <termios.h> header file. */
/* #undef HAVE_TERMIOS_H */

/* Define to 1 if you have the <time.h> header file. */
#define HAVE_TIME_H 0

/* Define to 1 if you have the <unistd.h> header file. */
/* #undef HAVE_UNISTD_H */

/* Define to 1 if you have the `vfork' function. */
/* #undef HAVE_VFORK */

/* Define to 1 if you have the <vfork.h> header file. */
/* #undef HAVE_VFORK_H */

/* Define to 1 if you have the <winsock2.h> header file. */
#define HAVE_WINSOCK2_H 0

/* Define to 1 if `fork' works. */
/* #undef HAVE_WORKING_FORK */

/* Define to 1 if `vfork' works. */
/* #undef HAVE_WORKING_VFORK */

/* Define to the sub-directory in which libtool stores uninstalled libraries.
 */
/* #undef LT_OBJDIR */

/* Name of package */
#define PACKAGE "libmodbus"

/* Define to the address where bug reports for this package should be sent. */
#define PACKAGE_BUGREPORT "https://github.com/stephane/libmodbus/issues"

/* Define to the full name of this package. */
#define PACKAGE_NAME "libmodbus"

/* Define to the full name and version of this package. */
#define PACKAGE_STRING "libmodbus @LIBMODBUS_VERSION@"

/* Define to the one symbol short name of this package. */
#define PACKAGE_TARNAME "libmodbus"

/* Define to the home page for this package. */
#define PACKAGE_URL ""

/* Define to the version of this package. */
#define PACKAGE_VERSION "@LIBMODBUS_VERSION@"

/* Define to 1 if you have the ANSI C header files. */
#define STDC_HEADERS 1

/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */
/* #undef TIME_WITH_SYS_TIME */

/* Version number of package */
#define VERSION "@LIBMODBUS_VERSION@"

/* Define to empty if `const' does not conform to ANSI C. */
/* #undef const */

/* Define to `int' if <sys/types.h> does not define. */
/* #undef pid_t */

/* Define to `unsigned int' if <sys/types.h> does not define. */
/* #undef size_t */

/* Define as `fork' if `vfork' does not work. */
//#define vfork fork

//#define _EMBED_POSIX  1
#undef _WIN32
#define _EMBED_SYSTEM 1

/* EMBED SYSTEM port */
#ifdef _EMBED_SYSTEM
#include <stdint.h>

/* byte conv */
extern uint16_t htons(uint16_t hs);
extern uint32_t htonl(uint32_t hl);
extern uint16_t ntohs(uint16_t ns);
extern uint32_t ntohl(uint32_t nl);

/* _TIMEVAL_DEFINED */
#ifndef _TIMEVAL_DEFINED
#define _TIMEVAL_DEFINED
struct timeval
{
	long tv_sec;
	long tv_usec;
};
#endif /* _TIMEVAL_DEFINED */

#ifdef __CC_ARM

struct timespec
{
	long tv_sec;  /* Seconds */
	long tv_nsec; /* Nanoseconds */
};

#define timerisset(tvp) ((tvp)->tv_sec || (tvp)->tv_usec)
#define timercmp(tvp, uvp, cmp)        \
	((tvp)->tv_sec cmp(uvp)->tv_sec || \
	 ((tvp)->tv_sec == (uvp)->tv_sec && (tvp)->tv_usec cmp(uvp)->tv_usec))
#define timerclear(tvp) (tvp)->tv_sec = (tvp)->tv_usec = 0

/* fd_set */
#ifndef FD_SETSIZE
#define FD_SETSIZE 64
#endif

typedef struct fd_set
{
	uint32_t fd_count;
	int32_t fd_array[FD_SETSIZE];
} fd_set;

#ifndef FD_ZERO
#define FD_ZERO(set) (((fd_set *)(set))->fd_count = 0)
#endif /* !FD_ZERO */

#define FD_SET(fd, set)                                                        \
	do                                                                         \
	{                                                                          \
		if (((fd_set *)(set))->fd_count < FD_SETSIZE)                          \
			((fd_set *)(set))->fd_array[((fd_set *)(set))->fd_count++] = (fd); \
	} while (0)

#elif __GNUC__

#include <time.h>

#endif // !__CC_ARM

/* dev structs define */
typedef void *serial_handle_t;

/* errno */
#include "errno_def.h"
extern int *_errno(void);

#endif // _EMBED_SYSTEM

#endif // !1
